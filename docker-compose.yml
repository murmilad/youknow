version: "3.6"
services:
  # DB
  db:
    environment:
      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_PASSWORD
    build:
      context: ./back/db
    ports:
      - ${POSTGRES_PORT}:5432
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3
  # Backend application
  backend:
    environment:
      - SERVER_NAME

      - POSTGRES_HOST
      - POSTGRES_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB

      - BACKEND_PORT
      - EXTERNAL_BACKEND_ADDRESS
      - EXTERNAL_BACKEND_PORT

      - EMAIL_FROM
      - SMTP_HOST
      - SMTP_USER
      - SMTP_PASS
      - SMTP_PORT
      - CLIENT_ORIGIN

      - TOKEN_EXPIRED_IN
      - TOKEN_MAXAGE

      - TOKEN_SECRET

      - GOOGLE_OAUTH_CLIENT_ID
      - GOOGLE_OAUTH_CLIENT_SECRET
      - GOOGLE_OAUTH_REDIRECT_URL

      - GITHUB_OAUTH_CLIENT_ID
      - GITHUB_OAUTH_CLIENT_SECRET
      - GITHUB_OAUTH_REDIRECT_URL

    build:
      context: ./back/service
    depends_on:
      db:
        condition: service_healthy
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}

  # Frontend web application
  frontend:
    environment:
      - EXTERNAL_BACKEND_ADDRESS
      - EXTERNAL_BACKEND_PORT

      - GOOGLE_OAUTH_CLIENT_ID
      - GOOGLE_OAUTH_REDIRECT_URL

      - GITHUB_OAUTH_CLIENT_ID
      - GITHUB_OAUTH_REDIRECT_URL
    build:
      context: ./front/library
      args:
        - EXTERNAL_BACKEND_ADDRESS=${EXTERNAL_BACKEND_ADDRESS}
        - EXTERNAL_BACKEND_PORT=${EXTERNAL_BACKEND_PORT}

        - GOOGLE_OAUTH_CLIENT_ID=${GOOGLE_OAUTH_CLIENT_ID}
        - GOOGLE_OAUTH_REDIRECT_URL=${GOOGLE_OAUTH_REDIRECT_URL}

        - GITHUB_OAUTH_CLIENT_ID=${GITHUB_OAUTH_CLIENT_ID}
        - GITHUB_OAUTH_REDIRECT_URL=${GITHUB_OAUTH_REDIRECT_URL}
    depends_on:
      - backend
    ports:
      - ${FRONTEND_PORT}:3000
  # External proxy
  proxy:
    network_mode: bridge
    environment:
      - PROXY_REDIRECT_ADDRESS
      - SERVER_NAME
      - SERVER_PORT
      - FRONTEND_PORT
      - BACKEND_PORT
      - NETDATA_PORT
      - IS_HTTPS
      - SSL_KEY_CERTIFICATE_PATH
      - SSL_CRT_CERTIFICATE_PATH

    build: ./proxy
    volumes:
      - ./proxy/log/nginx:/var/log/nginx
      - ./proxy/ssl:/etc/ssl
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
      - ${SERVER_STATS_PORT}:80
    command: /bin/bash /bin/start_nginx.sh
  fail2ban:
    image: lscr.io/linuxserver/fail2ban:latest
    cap_add:
      - NET_ADMIN
      - NET_RAW
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - VERBOSITY=-vv #optional
    volumes:
      - ./proxy:/config
      - ./proxy/log/nginx:/remotelogs/nginx:ro
    restart: unless-stopped
    depends_on:
      proxy:
        condition: service_started
  logrotate:
    image: thommeo/logrotate
    volumes:
      - ./proxy/log/nginx:/var/log/rotate
    restart: always
  netdata:
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - ./proxy/log/fail2ban:/external-log/fail2ban
      - ./proxy/log/nginx:/external-log/nginx
      - ./proxy/fail2ban:/etc/fail2ban
    ports:
      - ${NETDATA_PORT}:19999
    restart: unless-stopped
    security_opt:
      - apparmor:unconfined
    cap_add:
      - SYS_PTRACE
    build:
      context: ./proxy/netdata
      args:
        - PROXY_REDIRECT_ADDRESS
        - SERVER_STATS_PORT
    image: 'netdata/netdata'
volumes:
  netdatalib:
  netdatacache: