SELECT 'CREATE USER postgres'
WHERE NOT EXISTS(SELECT FROM pg_catalog.pg_roles WHERE rolname = 'postgres')\gexec

SELECT 'CREATE DATABASE youknow'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'youknow')\gexec

GRANT ALL PRIVILEGES ON DATABASE youknow TO postgres;

\c youknow;
 
DROP TABLE lessons_knows; 
DROP TABLE lessons;
DROP TYPE lesson_status;

CREATE TABLE IF NOT EXISTS users (
    id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY,
    name character varying(255) NOT NULL,
    email text NOT NULL,
    password text NOT NULL,
    role character varying(255) NOT NULL,
    provider text NOT NULL,
    photo text NOT NULL,
    verification_code text,
    verified boolean NOT NULL,
    timezone character varying(255),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    UNIQUE (email, provider)
);
ALTER TABLE users add IF NOT EXISTS timezone character varying(255);
ALTER TABLE users add IF NOT EXISTS deleted boolean NOT NULL DEFAULT false;


CREATE TABLE IF NOT EXISTS lesson_types (
    handler character varying(255) PRIMARY KEY,
    deleted boolean NOT NULL DEFAULT false
);
INSERT INTO lesson_types (handler)
SELECT 'FORGET_CURVE'
    WHERE NOT EXISTS (
        SELECT handler FROM lesson_types WHERE handler = 'FORGET_CURVE'
    );


DO $$ BEGIN
    CREATE TYPE know_status AS ENUM ('KNOW_NEW', 'KNOW_RIGHT', 'KNOW_WRONG');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;
DO $$ BEGIN
    CREATE TYPE lesson_status AS ENUM ('LESSON_PAUSED', 'LESSON_STARTED', 'LESSON_WAIT');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

CREATE TABLE IF NOT EXISTS know_types (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    style text NOT NULL,
    user_id uuid NOT NULL REFERENCES users(id),
    deleted boolean NOT NULL DEFAULT false
);

--Lesson

CREATE TABLE IF NOT EXISTS lessons (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    know_type_id int NOT NULL REFERENCES know_types(id),
    user_id uuid NOT NULL REFERENCES users(id),
    show_at timestamp with time zone NOT NULL,
    show_times int NOT NULL,
    lesson_type_handler character varying(255) NOT NULL REFERENCES lesson_types(handler),
    lesson_status lesson_status NOT NULL DEFAULT 'LESSON_PAUSED',
    priority_percent int CHECK (priority_percent BETWEEN 0 AND 100), 
    deleted boolean NOT NULL DEFAULT false,
    UNIQUE (know_type_id, user_id)
);


/*
CREATE OR REPLACE FUNCTION update_percent() RETURNS TRIGGER
LANGUAGE plpgsql
AS $_$
DECLARE
    _count int;
    _user_id uuid;
BEGIN

IF TG_OP <> 'INSERT' THEN
    _user_id = OLD.user_id;
END IF
IF TG_OP <> 'DELETE' THEN
    _user_id = NEW.user_id;
END IF

SELECT count(*)
    INTO _count
FROM lessons
WHERE user_id = _user_id;

IF TG_OP = 'INSERT' THEN
    UPDATE lessons
        SET priority_percent = IF priority_percent WHEN NULL THEN 100/_count ELSE priority_percent - (priority_percent/100*100/_count) END IF
    WHERE user_id = _user_id
END IF;
IF TG_OP == 'DELETE' THEN
    UPDATE lessons
        SET priority_percent = priority_percent + (priority_percent/100*100/(_count+1))
    WHERE user_id = _user_id
END IF;
IF TG_OP == 'UPDATE' AND OLD.priority_percent <> NEW.priority_percent THEN
    UPDATE lessons
        SET priority_percent = priority_percent + (priority_percent/100*(OLD.priority_percent - NEW.priority_percent))
    WHERE 
        id != OLD.id
        AND user_id = _user_id
END IF;

RETURN NULL;
END;
$_$;

CREATE TRIGGER update_percent AFTER INSERT OR UPDATE OR DELETE ON lessons
FOR EACH STATEMENT EXECUTE PROCEDURE update_percent();
*/
--Lesson know


CREATE TABLE IF NOT EXISTS lessons_knows (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    know_id bigint NOT NULL REFERENCES knows(id),
    lesson_id bigint NOT NULL REFERENCES lessons(id),
    know_status know_status NOT NULL DEFAULT 'KNOW_NEW',
    ask_at timestamp with time zone,
    deleted boolean NOT NULL DEFAULT false
);

CREATE TABLE IF NOT EXISTS knows (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    knowtype_id bigint NOT NULL REFERENCES know_types(id),
    lesson_type_handler character varying(255) NOT NULL REFERENCES lesson_types(handler),
    name text NOT NULL,
    value text NOT NULL,
    deleted boolean NOT NULL DEFAULT false
);
ALTER TABLE knows add IF NOT EXISTS lesson_type_handler character varying(255) NOT NULL REFERENCES lesson_types(handler) DEFAULT 'FORGET_CURVE';

CREATE TABLE IF NOT EXISTS notifications_periods (
    user_id uuid NOT NULL REFERENCES users(id),
    begin_time TIME with time zone NOT NULL,
    end_time TIME with time zone NOT NULL,
    deleted boolean NOT NULL DEFAULT false
);


